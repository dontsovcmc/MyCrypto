.. _n9:

###########
Set 2 No. 9
###########

**Set 2 No. 9:  PKCS#7 padding**

http://cryptopals.com/sets/2/challenges/9/

Before we start 2-9 I want to explore Python bytes a little.  We've used both ``"0xff"`` and ``"\xff"`` above.  The first one looks like hex, but it's just a string.  For example

    >>> b = "0xff"
    >>> FH = open('x','wb')
    >>> FH.write(b)
    >>> FH.close()
    >>> 
    >>>

.. sourcecode:: bash

    > hexdump -C x
    00000000  30 78 66 66                                       |0xff|
    00000004
    >
    
With the ``"0xff"`` construct, the 4-byte string was written to file.  On the other hand

    >>> b = "\xff"
    >>> FH = open('x','wb')
    >>> FH.write(b)
    >>> FH.close()
    >>> 
    >>>

.. sourcecode:: bash

    > hexdump -C x
    00000000  ff                                                |.|
    00000001
    >

This time we got the actual byte ``ff``.  The ``hex`` built-in method gives the string, not the byte:

    >>> hex(15)
    '0xf'
    >>> hex(255)
    '0xff'
    >>>

So, in this problem, we want to pad with real bytes.  A problem that comes up is that we can't assemble a byte:

    >>> b = '\x0' + '3'
    ValueError: invalid \x escape
    >>>

Although we could do:

    >>> b = '\xff0' + '3'
    >>> b
    '\xff03'
    >>>

But this is deceptive.  The ``open``, ``write``, ``close`` sequence shows why:

.. sourcecode:: bash

    > hexdump -C x
    00000000  ff 30 33                                          |.03|
    00000003
    >

As does

    >>> len(b)
    3
    >>>

The variable ``b`` prints as ``'\xff03'`` but when we write it to file, we see that it is the byte ``ff`` followed by the byte ``"0"`` (hex ``30`` or int 48), followed by ``"3"`` (hex ``33`` or int 51).

Instead, what we want is  ``b = '\xff\x03'`` and then what we will get is

.. sourcecode:: bash

    > hexdump -C x
    00000000  ff 03                                             |..|
    00000002
    >

So that's important to remember.  We used the ``bytearray.fromhex`` constructor before.  The ``b'\xff\x03'`` construct is a shorthand for this method.

    >>> ba = bytearray.fromhex('ff03')
    >>> ba
    bytearray(b'\xff\x03')
    >>> ba2 = b'\xff\x03'
    >>> ba == ba2
    True
    >>>
    

This gives us an actual array of bytes that writes to file as we expect.

    >>> ba = bytearray.fromhex('eebb')
    >>> for c in ba:
    ...     print c
    ... 
    238
    187
    >>>>>> FH = open('x','wb')
    >>> FH.write(ba)
    >>> FH.close()
    >>>

Implement CB

.. sourcecode:: bash

    > hexdump -C x
    00000000  ee bb                                             |..|
    00000002
    >
    
So, having written all this, how to pad out a variable with a number of bytes of to be determined at run time.  The ``PKCS#7`` approach is to count the number of bytes needed to reach ``8`` or ``16``, and then pad with that number of the same byte.  But we cannot do something like:

    >>> '\x0' + 3
    ValueError: invalid \x escape
    >>>

One way that works, but seems rather inelegant:

L = ['\x00','\x01','\x02','\x03',
     '\x04','\x05','\x06','\x07',
     '\x08','\x09','\x0a','\x0b',
     '\x0c','\x0d','\x0e','\x0f' ]

     >>> L = ['\x00','\x01','\x02','\x03',
     ...      '\x04','\x05','\x06','\x07',
     ...      '\x08','\x09','\x0a','\x0b',
     ...      '\x0c','\x0d','\x0e','\x0f' ]
     >>> 
     >>> L[:8]
     ['\x00', '\x01', '\x02', '\x03', '\x04', '\x05', '\x06', '\x07']
     >>> L[8:]
     ['\x08', '\t', '\n', '\x0b', '\x0c', '\r', '\x0e', '\x0f']
     >>>



     >>> k = "YELLOW SUBMAR"
     >>> diff = 16 - (len(k) % 16)
     >>> diff
     3
     >>> k = bytearray(k) + diff * L[diff]
     >>> k
     bytearray(b'YELLOW SUBMAR\x03\x03\x03')
     >>>

So, here is 

``script.py``:

.. sourcecode:: python

    def pad(s,n=8):
        L = ['\x00','\x01','\x02','\x03',
             '\x04','\x05','\x06','\x07',
             '\x08','\x09','\x0a','\x0b',
             '\x0c','\x0d','\x0e','\x0f' ]
        diff = n - (len(k) % n)
        return bytearray(s) + diff * L[diff]

    k = "YELLOW SUBMARINE"
    n = 20
    print `pad(k,n)`

.. sourcecode:: bash

    > python script.py 
    bytearray(b'YELLOW SUBMARINE\x04\x04\x04\x04')
    >

This will crash if ``diff`` is too large.  But we can predict the needed size. 

